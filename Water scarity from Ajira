    Year is 3030, water is a scare resource. civilizations live around glaciers in clusters, with a federal
body (identified as F) in center melting glaciers and controlling the water distribution. Each cluster
has need for water for a day and water for a day and a water storage capacity. Cluster are connected
to each other with a pipe identified by _ . pipes are flow controlled and water flows in forward
direction only. Every time water starts flowing through pipe. The clusters drain their tanks for use in
other activities, as they can use the water flowing to fill the tanks, and federal body sends water till
the capacity is full. Tanks are empty at beginning of day, water tanks fill in an instant. Clusters don’t
share their water with other clusters, but allow federal water to flow through the pipe. Federal body
releases water at start of day, clusters uses water at end of day. In a pipe link like F-C1--C2-C3-C4.
When federal water body targets C3, only C3 and nodes before it (here C1,C2,C3) can fill the tank, C4
can fill it only when its targeted.
Calculate the minimum water needed to help the civilizations survive for n days.
Input is multiple. First line is the number of days to survive. Second line the number of clusters
followed by their definitions. Next Is the number of links in the system, followed by the link definitions.

CLUSTER DEFINITIONS:
C1 100 300

Here
C1  - Cluster name
100 – daily water need
300 – storage capacity

LINK DEFINITIONS:
F_C1

F – is the federal source of pipe
C – Is the sink destination  of pipe (Cluster tank)



PROGRAM:

fill={};    cluster= {};    pipe=[];    water=0
days=3
cluster_input=["C1 100 300","C2 100 300","C3 100 200","C4 100 400"]
for i in cluster_input:
    i=i.split()
    fill[i[0]] = list(map(int,i[1:]))
    cluster[i[0]] = int(i[2])
    water+=int(i[2])

pipe_input=["F_C1","F_C2","C2_C3","C3_C4"]
for i in pipe_input:
    i=i.split('_')
    if 'F' == i[0]:
        pipe.append([i[1]])
    else:
        for j in pipe:
            if i[0] in j:
                j.append(i[1])
def green():
    for i,j in fill.items():
        cluster[i]-=j[0]
        
def refill():
    global water
    for i in rf:
        for l in pipe:
             if(i in l):
                 for m in range(0,l.index(i)+1):
                     cluster[l[m]]=0 
    for i,j in fill.items():
        if(cluster[i]==0):
            cluster[i]+=j[1]
            water+=j[1]                   
d=0             
while(d<days):
    rf=[]
    red=0
    for i,j in fill.items():
        if(cluster[i]<j[0]):
            red+=1
            rf.append(i)
    if(red==0):
        green()
    else:  
        refill()
        green()
    d+=1
print(water)    



'''
TEST CASE 1:
INPUT:  
3
4
C1 100 300
C2 100 300
C3 100 200
C4 100 400
4
F_C1
F_C2
C2_C3
C3_C4

OUTPUT:
1700



TEST CASE 2:
INPUT:
2
4
C1 200 400
C2 200 300
C3 100 100
C4 150 300
4
F_C1
F_C3
C1_C2
C3_C4

OUTPUT:
1900



TEST CASE 3:
INPUT:
3
4
C1 200 300
C2 150 300
C3 200 200
C4 100 400
4
F_C1
F_C3
C3_C4
C1_C2

OUTPUT:
2500
'''
